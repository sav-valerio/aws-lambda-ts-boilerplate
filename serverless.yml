service: lambda-boilerplate
frameworkVersion: '3'

provider:
  name: aws
  region: eu-west-1
  stage: ${opt:stage, 'test'}

  runtime: nodejs18.x
  architecture: arm64
  logRetentionInDays: 14
  
  tracing:
    apiGateway: true
    lambda: true

  iam:
    # Managed by infra-pulumi - create accordingly
    role: arn:aws:iam::${aws:accountId}:role/weschool-lambda-boilerplate-lambdarole-${self:provider.stage}

  # Environment variables exposed to Lambdas
  # environment:
    # EXAMPLE_ENV: ${ssm:/uploads/${self:provider.stage}/example/param}

params:
  # Default testing subdomains are on Route53
  default:
    domainName: lambda-boilerplate-${sls:stage}.weschoolapp.com
    certificateName: '*.weschoolapp.com'
    createRoute53Record: true
  # Stage/prod records are on Cloudflare
  stage:
    domainName: lambda-boilerplate-${sls:stage}.weschool.com
    certificateName: '*.weschool.com'
    createRoute53Record: false
  prod:
    domainName: lambda-boilerplate-${sls:stage}.weschool.com
    certificateName: '*.weschool.com'
    createRoute53Record: false

functions:
  example:
    handler: src/example.handler
    events:
      - httpApi: 'GET /test'
    memorySize: 1024
    timeout: 10
    lambdaInsights: true

plugins:
  - serverless-esbuild
  - serverless-plugin-lambda-insights
  - serverless-domain-manager
  - serverless-offline

custom:
  esbuild:
    config: esbuild.config.cjs
    
  customDomain:
    domainName: ${param:domainName}
    certificateName: ${param:certificateName}
    createRoute53Record: ${param:createRoute53Record}
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: http
    autoDomain: true